{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imachado\\\\Desktop\\\\Develop\\\\projects\\\\uolDesafio\\\\src\\\\core\\\\contexts\\\\GitHubContext\\\\index.tsx\",\n    _s = $RefreshSig$(),\n    _this = this,\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useContext } from 'react';\nimport useGitHub from '@core/hooks/useGitHub';\nvar GitHubContext = /*#__PURE__*/createContext({});\n\nfunction useGitHubContext() {\n  _s();\n\n  var context = useContext(GitHubContext);\n\n  if (!context) {\n    throw new Error('useUser must be used within an UserProvider.');\n  }\n\n  return context;\n}\n\n_s(useGitHubContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar GitHubProvider = function GitHubProvider(props) {\n  _s2();\n\n  var children = props.children;\n\n  var _useGitHub = useGitHub(),\n      actions = _useGitHub.actions,\n      state = _useGitHub.state;\n\n  function getUser(userSearch) {\n    actions.getUser(userSearch);\n  }\n\n  function getRepositoriesList() {\n    actions.getRepositoriesList();\n  }\n\n  function getStarredList() {\n    actions.getStarredList();\n  }\n\n  return __jsx(GitHubContext.Provider, {\n    value: {\n      hasUserNotFound: state.hasUserNotFound,\n      isLoading: state.isLoading,\n      isLoadingSearch: state.isLoadingSearch,\n      repositories: state.repositories,\n      user: state.user,\n      getUser: getUser,\n      getRepositoriesList: getRepositoriesList,\n      getStarredList: getStarredList\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, children);\n};\n\n_s2(GitHubProvider, \"sJ4enIrNoaO8HpoMG6bW7PFTJVk=\", false, function () {\n  return [useGitHub];\n});\n\n_c = GitHubProvider;\nexport { GitHubProvider, useGitHubContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"GitHubProvider\");","map":{"version":3,"sources":["C:/Users/imachado/Desktop/Develop/projects/uolDesafio/src/core/contexts/GitHubContext/index.tsx"],"names":["createContext","useContext","useGitHub","GitHubContext","useGitHubContext","context","Error","GitHubProvider","props","children","actions","state","getUser","userSearch","getRepositoriesList","getStarredList","hasUserNotFound","isLoading","isLoadingSearch","repositories","user"],"mappings":";;;;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAGA,IAAMC,aAAa,gBAAGH,aAAa,CACjC,EADiC,CAAnC;;AAIA,SAASI,gBAAT,GAAoD;AAAA;;AAClD,MAAMC,OAAO,GAAGJ,UAAU,CAACE,aAAD,CAA1B;;AACA,MAAI,CAACE,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;GANQD,gB;;AAQT,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAyB;AAAA;;AAAA,MACtCC,QADsC,GACzBD,KADyB,CACtCC,QADsC;;AAAA,mBAEnBP,SAAS,EAFU;AAAA,MAEtCQ,OAFsC,cAEtCA,OAFsC;AAAA,MAE7BC,KAF6B,cAE7BA,KAF6B;;AAI9C,WAASC,OAAT,CAAiBC,UAAjB,EAAqC;AACnCH,IAAAA,OAAO,CAACE,OAAR,CAAgBC,UAAhB;AACD;;AAED,WAASC,mBAAT,GAA+B;AAC7BJ,IAAAA,OAAO,CAACI,mBAAR;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBL,IAAAA,OAAO,CAACK,cAAR;AACD;;AAED,SACE,MAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,eAAe,EAAEL,KAAK,CAACK,eADlB;AAELC,MAAAA,SAAS,EAAEN,KAAK,CAACM,SAFZ;AAGLC,MAAAA,eAAe,EAAEP,KAAK,CAACO,eAHlB;AAILC,MAAAA,YAAY,EAAER,KAAK,CAACQ,YAJf;AAKLC,MAAAA,IAAI,EAAET,KAAK,CAACS,IALP;AAMLR,MAAAA,OAAO,EAAPA,OANK;AAOLE,MAAAA,mBAAmB,EAAnBA,mBAPK;AAQLC,MAAAA,cAAc,EAAdA;AARK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGN,QAZH,CADF;AAgBD,CAhCD;;IAAMF,c;UAEuBL,S;;;KAFvBK,c;AAkCN,SAASA,cAAT,EAAyBH,gBAAzB","sourcesContent":["import { createContext, useContext } from 'react';\r\nimport useGitHub from '@core/hooks/useGitHub';\r\nimport { GitHubContextInterface } from './interfaces';\r\n\r\nconst GitHubContext = createContext<GitHubContextInterface>(\r\n  {} as GitHubContextInterface,\r\n);\r\n\r\nfunction useGitHubContext(): GitHubContextInterface {\r\n  const context = useContext(GitHubContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within an UserProvider.');\r\n  }\r\n  return context;\r\n}\r\n\r\nconst GitHubProvider = (props: { children }) => {\r\n  const { children } = props;\r\n  const { actions, state } = useGitHub();\r\n\r\n  function getUser(userSearch: string) {\r\n    actions.getUser(userSearch);\r\n  }\r\n\r\n  function getRepositoriesList() {\r\n    actions.getRepositoriesList();\r\n  }\r\n\r\n  function getStarredList() {\r\n    actions.getStarredList();\r\n  }\r\n\r\n  return (\r\n    <GitHubContext.Provider\r\n      value={{\r\n        hasUserNotFound: state.hasUserNotFound,\r\n        isLoading: state.isLoading,\r\n        isLoadingSearch: state.isLoadingSearch,\r\n        repositories: state.repositories,\r\n        user: state.user,\r\n        getUser,\r\n        getRepositoriesList,\r\n        getStarredList,\r\n      }}\r\n    >\r\n      {children}\r\n    </GitHubContext.Provider>\r\n  );\r\n};\r\n\r\nexport { GitHubProvider, useGitHubContext };\r\n"]},"metadata":{},"sourceType":"module"}