{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nexport default function useGitHub() {\n  _s();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(null),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      userNotFound = _useState3[0],\n      setuUserNotFound = _useState3[1];\n\n  var _useState4 = useState(null),\n      repositories = _useState4[0],\n      setRepositories = _useState4[1];\n\n  var _useState5 = useState(false),\n      loadingSearch = _useState5[0],\n      setLoadingSearch = _useState5[1];\n\n  function getUser(_x) {\n    return _getUser.apply(this, arguments);\n  }\n\n  function _getUser() {\n    _getUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userSearch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoadingSearch(true);\n              setuUserNotFound(false);\n              setUser(null);\n              _context.next = 5;\n              return axios.get(\"https://api.github.com/users/\".concat(userSearch)).then(function (res) {\n                setUser(res.data);\n              })[\"catch\"](function (err) {\n                return setuUserNotFound(true);\n              })[\"finally\"](function () {\n                return setLoadingSearch(false);\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getUser.apply(this, arguments);\n  }\n\n  function getRepositoriesList() {\n    return _getRepositoriesList.apply(this, arguments);\n  }\n\n  function _getRepositoriesList() {\n    _getRepositoriesList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setIsLoading(true);\n\n              if (!user) {\n                _context2.next = 4;\n                break;\n              }\n\n              _context2.next = 4;\n              return axios.get(\"https://api.github.com/users/\".concat(user.login, \"/repos\")).then(function (res) {\n                setRepositories(res.data);\n              })[\"catch\"]()[\"finally\"](function () {\n                return setIsLoading(false);\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _getRepositoriesList.apply(this, arguments);\n  }\n\n  function clean() {\n    setuUserNotFound(false);\n    setIsLoading(false);\n    setLoadingSearch(false);\n    setRepositories(null);\n    setUser(null);\n  }\n\n  return {\n    state: {\n      isLoading: isLoading,\n      user: user,\n      userNotFound: userNotFound,\n      repositories: repositories,\n      loadingSearch: loadingSearch\n    },\n    actions: {\n      getUser: getUser,\n      getRepositoriesList: getRepositoriesList,\n      clean: clean\n    }\n  };\n}\n\n_s(useGitHub, \"bodSQkjrC5MjgOgUmR1btOCNTRI=\");","map":{"version":3,"sources":["C:/Users/imachado/Desktop/next-boilerplate/src/core/hooks/useGitHub/index.tsx"],"names":["useState","axios","useGitHub","isLoading","setIsLoading","user","setUser","userNotFound","setuUserNotFound","repositories","setRepositories","loadingSearch","setLoadingSearch","getUser","userSearch","get","then","res","data","err","getRepositoriesList","login","clean","state","actions"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAAA,kBACAF,QAAQ,CAAU,KAAV,CADR;AAAA,MAC3BG,SAD2B;AAAA,MAChBC,YADgB;;AAAA,mBAEVJ,QAAQ,CAAc,IAAd,CAFE;AAAA,MAE3BK,IAF2B;AAAA,MAErBC,OAFqB;;AAAA,mBAGON,QAAQ,CAAU,KAAV,CAHf;AAAA,MAG3BO,YAH2B;AAAA,MAGbC,gBAHa;;AAAA,mBAIMR,QAAQ,CAAsB,IAAtB,CAJd;AAAA,MAI3BS,YAJ2B;AAAA,MAIbC,eAJa;;AAAA,mBAKQV,QAAQ,CAAU,KAAV,CALhB;AAAA,MAK3BW,aAL2B;AAAA,MAKZC,gBALY;;AAAA,WAOnBC,OAPmB;AAAA;AAAA;;AAAA;AAAA,wEAOlC,iBAAuBC,UAAvB;AAAA;AAAA;AAAA;AAAA;AACEF,cAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAJ,cAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAF,cAAAA,OAAO,CAAC,IAAD,CAAP;AAHF;AAAA,qBAIQL,KAAK,CACRc,GADG,wCACuCD,UADvC,GAEHE,IAFG,CAEE,UAACC,GAAD,EAAS;AACbX,gBAAAA,OAAO,CAACW,GAAG,CAACC,IAAL,CAAP;AACD,eAJG,WAKG,UAACC,GAAD;AAAA,uBAASX,gBAAgB,CAAC,IAAD,CAAzB;AAAA,eALH,aAMK;AAAA,uBAAMI,gBAAgB,CAAC,KAAD,CAAtB;AAAA,eANL,CAJR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAPkC;AAAA;AAAA;;AAAA,WAoBnBQ,QApBmB;AAAA;AAAA;;AAAA;AAAA,yEAoBlC;AAAA;AAAA;AAAA;AAAA;AACEhB,cAAAA,YAAY,CAAC,IAAD,CAAZ;;AADF,mBAEMC,IAFN;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGUJ,KAAK,CACRc,GADG,wCACiCV,IAAI,CAACgB,KADtC,aAEHL,IAFG,CAEE,UAACC,GAAD,EAAS;AACbP,gBAAAA,eAAe,CAACO,GAAG,CAACC,IAAL,CAAf;AACD,eAJG,wBAMK;AAAA,uBAAMd,YAAY,CAAC,KAAD,CAAlB;AAAA,eANL,CAHV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApBkC;AAAA;AAAA;;AAiClC,WAASkB,KAAT,GAAuB;AACrBd,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAQ,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAF,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD;;AAED,SAAO;AACLiB,IAAAA,KAAK,EAAE;AACLpB,MAAAA,SAAS,EAATA,SADK;AAELE,MAAAA,IAAI,EAAJA,IAFK;AAGLE,MAAAA,YAAY,EAAZA,YAHK;AAILE,MAAAA,YAAY,EAAZA,YAJK;AAKLE,MAAAA,aAAa,EAAbA;AALK,KADF;AAQLa,IAAAA,OAAO,EAAE;AACPX,MAAAA,OAAO,EAAPA,OADO;AAEPO,MAAAA,QAAQ,EAARA,QAFO;AAGPE,MAAAA,KAAK,EAALA;AAHO;AARJ,GAAP;AAcD;;GAvDuBpB,S","sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { User, Repository } from './interface';\r\n\r\nexport default function useGitHub() {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [userNotFound, setuUserNotFound] = useState<boolean>(false);\r\n  const [repositories, setRepositories] = useState<Repository[] | null>(null);\r\n  const [loadingSearch, setLoadingSearch] = useState<boolean>(false);\r\n\r\n  async function getUser(userSearch: string): Promise<void> {\r\n    setLoadingSearch(true);\r\n    setuUserNotFound(false);\r\n    setUser(null);\r\n    await axios\r\n      .get<User>(`https://api.github.com/users/${userSearch}`)\r\n      .then((res) => {\r\n        setUser(res.data);\r\n      })\r\n      .catch((err) => setuUserNotFound(true))\r\n      .finally(() => setLoadingSearch(false));\r\n  }\r\n\r\n  async function getRepositoriesList(): Promise<void> {\r\n    setIsLoading(true);\r\n    if (user) {\r\n      await axios\r\n        .get(`https://api.github.com/users/${user.login}/repos`)\r\n        .then((res) => {\r\n          setRepositories(res.data);\r\n        })\r\n        .catch()\r\n        .finally(() => setIsLoading(false));\r\n    }\r\n  }\r\n\r\n  function clean(): void {\r\n    setuUserNotFound(false);\r\n    setIsLoading(false);\r\n    setLoadingSearch(false);\r\n    setRepositories(null);\r\n    setUser(null);\r\n  }\r\n\r\n  return {\r\n    state: {\r\n      isLoading,\r\n      user,\r\n      userNotFound,\r\n      repositories,\r\n      loadingSearch,\r\n    },\r\n    actions: {\r\n      getUser,\r\n      getRepositoriesList,\r\n      clean,\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}