{"ast":null,"code":"import { useState } from 'react';\nimport axios from 'axios';\nexport default function useGitHub() {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: userNotFound,\n    1: setuUserNotFound\n  } = useState(false);\n  const {\n    0: repositories,\n    1: setRepositories\n  } = useState(null);\n\n  async function getUser(userSearch) {\n    setIsLoading(true);\n    setuUserNotFound(false);\n    setUser(null);\n    await axios.get(`https://api.github.com/users/${userSearch}`).then(res => {\n      setUser(res.data);\n    }).catch(err => setuUserNotFound(true)).finally(() => setIsLoading(false));\n  }\n\n  async function getRepositoriesList() {\n    setIsLoading(true);\n\n    if (user) {\n      await axios.get(`https://api.github.com/users/${user.login}/repos`).then(res => {\n        setRepositories(res.data);\n      }).catch().finally(() => setIsLoading(false));\n    }\n  }\n\n  function clean() {\n    setuUserNotFound(false);\n    setIsLoading(false);\n    setRepositories(null);\n    setUser(null);\n  }\n\n  return {\n    state: {\n      isLoading,\n      user,\n      userNotFound,\n      repositories\n    },\n    actions: {\n      getUser,\n      getRepositoriesList,\n      clean\n    }\n  };\n}","map":{"version":3,"sources":["/home/iago/Desktop/uolDesafio/src/core/hooks/useGitHub/index.tsx"],"names":["useState","axios","useGitHub","isLoading","setIsLoading","user","setUser","userNotFound","setuUserNotFound","repositories","setRepositories","getUser","userSearch","get","then","res","data","catch","err","finally","getRepositoriesList","login","clean","state","actions"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BJ,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAc,IAAd,CAAhC;AACA,QAAM;AAAA,OAACO,YAAD;AAAA,OAAeC;AAAf,MAAmCR,QAAQ,CAAU,KAAV,CAAjD;AACA,QAAM;AAAA,OAACS,YAAD;AAAA,OAAeC;AAAf,MAAkCV,QAAQ,CAAsB,IAAtB,CAAhD;;AAEA,iBAAeW,OAAf,CAAuBC,UAAvB,EAA0D;AACxDR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAF,IAAAA,OAAO,CAAC,IAAD,CAAP;AACA,UAAML,KAAK,CACRY,GADG,CACQ,gCAA+BD,UAAW,EADlD,EAEHE,IAFG,CAEGC,GAAD,IAAS;AACbT,MAAAA,OAAO,CAACS,GAAG,CAACC,IAAL,CAAP;AACD,KAJG,EAKHC,KALG,CAKIC,GAAD,IAASV,gBAAgB,CAAC,IAAD,CAL5B,EAMHW,OANG,CAMK,MAAMf,YAAY,CAAC,KAAD,CANvB,CAAN;AAOD;;AAED,iBAAegB,QAAf,GAAyC;AACvChB,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAIC,IAAJ,EAAU;AACR,YAAMJ,KAAK,CACRY,GADG,CACE,gCAA+BR,IAAI,CAACgB,KAAM,QAD5C,EAEHP,IAFG,CAEGC,GAAD,IAAS;AACbL,QAAAA,eAAe,CAACK,GAAG,CAACC,IAAL,CAAf;AACD,OAJG,EAKHC,KALG,GAMHE,OANG,CAMK,MAAMf,YAAY,CAAC,KAAD,CANvB,CAAN;AAOD;AACF;;AAED,WAASkB,KAAT,GAAuB;AACrBd,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAM,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD;;AAED,SAAO;AACLiB,IAAAA,KAAK,EAAE;AACLpB,MAAAA,SADK;AAELE,MAAAA,IAFK;AAGLE,MAAAA,YAHK;AAILE,MAAAA;AAJK,KADF;AAOLe,IAAAA,OAAO,EAAE;AACPb,MAAAA,OADO;AAEPS,MAAAA,QAFO;AAGPE,MAAAA;AAHO;AAPJ,GAAP;AAaD","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\nimport { User, Repository } from './interface';\n\nexport default function useGitHub() {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [userNotFound, setuUserNotFound] = useState<boolean>(false);\n  const [repositories, setRepositories] = useState<Repository[] | null>(null);\n\n  async function getUser(userSearch: string): Promise<void> {\n    setIsLoading(true);\n    setuUserNotFound(false);\n    setUser(null);\n    await axios\n      .get<User>(`https://api.github.com/users/${userSearch}`)\n      .then((res) => {\n        setUser(res.data);\n      })\n      .catch((err) => setuUserNotFound(true))\n      .finally(() => setIsLoading(false));\n  }\n\n  async function getRepositoriesList(): Promise<void> {\n    setIsLoading(true);\n    if (user) {\n      await axios\n        .get(`https://api.github.com/users/${user.login}/repos`)\n        .then((res) => {\n          setRepositories(res.data);\n        })\n        .catch()\n        .finally(() => setIsLoading(false));\n    }\n  }\n\n  function clean(): void {\n    setuUserNotFound(false);\n    setIsLoading(false);\n    setRepositories(null);\n    setUser(null);\n  }\n\n  return {\n    state: {\n      isLoading,\n      user,\n      userNotFound,\n      repositories,\n    },\n    actions: {\n      getUser,\n      getRepositoriesList,\n      clean,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}