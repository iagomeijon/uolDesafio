{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imachado\\\\Desktop\\\\Develop\\\\projects\\\\uolDesafio\\\\src\\\\core\\\\contexts\\\\GitHubContext\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useContext } from 'react';\nimport useGitHub from '@core/hooks/useGitHub';\nconst GitHubContext = /*#__PURE__*/createContext({});\n\nfunction useGitHubContext() {\n  const context = useContext(GitHubContext);\n\n  if (!context) {\n    throw new Error('useUser must be used within an UserProvider.');\n  }\n\n  return context;\n}\n\nconst GitHubProvider = props => {\n  const {\n    children\n  } = props;\n  const {\n    actions,\n    state\n  } = useGitHub();\n\n  function getUser(userSearch) {\n    actions.getUser(userSearch);\n  }\n\n  function getRepositoriesList() {\n    actions.getRepositoriesList();\n  }\n\n  function getStarredList() {\n    actions.getStarredList();\n  }\n\n  return __jsx(GitHubContext.Provider, {\n    value: {\n      hasUserNotFound: state.hasUserNotFound,\n      isLoading: state.isLoading,\n      isLoadingSearch: state.isLoadingSearch,\n      repositories: state.repositories,\n      user: state.user,\n      getUser,\n      getRepositoriesList,\n      getStarredList\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { GitHubProvider, useGitHubContext };","map":{"version":3,"sources":["C:/Users/imachado/Desktop/Develop/projects/uolDesafio/src/core/contexts/GitHubContext/index.tsx"],"names":["createContext","useContext","useGitHub","GitHubContext","useGitHubContext","context","Error","GitHubProvider","props","children","actions","state","getUser","userSearch","getRepositoriesList","getStarredList","hasUserNotFound","isLoading","isLoadingSearch","repositories","user"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAGA,MAAMC,aAAa,gBAAGH,aAAa,CACjC,EADiC,CAAnC;;AAIA,SAASI,gBAAT,GAAoD;AAClD,QAAMC,OAAO,GAAGJ,UAAU,CAACE,aAAD,CAA1B;;AACA,MAAI,CAACE,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;AAED,MAAME,cAAc,GAAIC,KAAD,IAAyB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqBT,SAAS,EAApC;;AAEA,WAASU,OAAT,CAAiBC,UAAjB,EAAqC;AACnCH,IAAAA,OAAO,CAACE,OAAR,CAAgBC,UAAhB;AACD;;AAED,WAASC,mBAAT,GAA+B;AAC7BJ,IAAAA,OAAO,CAACI,mBAAR;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBL,IAAAA,OAAO,CAACK,cAAR;AACD;;AAED,SACE,MAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,eAAe,EAAEL,KAAK,CAACK,eADlB;AAELC,MAAAA,SAAS,EAAEN,KAAK,CAACM,SAFZ;AAGLC,MAAAA,eAAe,EAAEP,KAAK,CAACO,eAHlB;AAILC,MAAAA,YAAY,EAAER,KAAK,CAACQ,YAJf;AAKLC,MAAAA,IAAI,EAAET,KAAK,CAACS,IALP;AAMLR,MAAAA,OANK;AAOLE,MAAAA,mBAPK;AAQLC,MAAAA;AARK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGN,QAZH,CADF;AAgBD,CAhCD;;AAkCA,SAASF,cAAT,EAAyBH,gBAAzB","sourcesContent":["import { createContext, useContext } from 'react';\r\nimport useGitHub from '@core/hooks/useGitHub';\r\nimport { GitHubContextInterface } from './interfaces';\r\n\r\nconst GitHubContext = createContext<GitHubContextInterface>(\r\n  {} as GitHubContextInterface,\r\n);\r\n\r\nfunction useGitHubContext(): GitHubContextInterface {\r\n  const context = useContext(GitHubContext);\r\n  if (!context) {\r\n    throw new Error('useUser must be used within an UserProvider.');\r\n  }\r\n  return context;\r\n}\r\n\r\nconst GitHubProvider = (props: { children }) => {\r\n  const { children } = props;\r\n  const { actions, state } = useGitHub();\r\n\r\n  function getUser(userSearch: string) {\r\n    actions.getUser(userSearch);\r\n  }\r\n\r\n  function getRepositoriesList() {\r\n    actions.getRepositoriesList();\r\n  }\r\n\r\n  function getStarredList() {\r\n    actions.getStarredList();\r\n  }\r\n\r\n  return (\r\n    <GitHubContext.Provider\r\n      value={{\r\n        hasUserNotFound: state.hasUserNotFound,\r\n        isLoading: state.isLoading,\r\n        isLoadingSearch: state.isLoadingSearch,\r\n        repositories: state.repositories,\r\n        user: state.user,\r\n        getUser,\r\n        getRepositoriesList,\r\n        getStarredList,\r\n      }}\r\n    >\r\n      {children}\r\n    </GitHubContext.Provider>\r\n  );\r\n};\r\n\r\nexport { GitHubProvider, useGitHubContext };\r\n"]},"metadata":{},"sourceType":"module"}