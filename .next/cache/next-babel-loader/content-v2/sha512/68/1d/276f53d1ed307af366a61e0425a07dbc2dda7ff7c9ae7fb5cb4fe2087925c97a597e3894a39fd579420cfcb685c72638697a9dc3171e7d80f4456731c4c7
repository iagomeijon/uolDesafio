{"ast":null,"code":"// MARK: Libs\nimport { useState } from 'react';\nimport axios from 'axios';\nexport default function useGitHub() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: repositories,\n    1: setRepositories\n  } = useState(null);\n  const {\n    0: hasUserNotFound,\n    1: setHasUserNotFound\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isLoadingSearch,\n    1: setIsLoadingSearch\n  } = useState(false);\n\n  function clean() {\n    setHasUserNotFound(false);\n    setIsLoading(false);\n    setIsLoadingSearch(false);\n    setRepositories(null);\n    setUser(null);\n  }\n\n  async function getUser(userSearch) {\n    clean();\n    setIsLoadingSearch(true);\n\n    try {\n      const res = await axios.get(`https://api.github.com/users/${userSearch}`);\n      setUser(res.data);\n    } catch (err) {\n      setHasUserNotFound(true);\n    } finally {\n      setIsLoadingSearch(false);\n    }\n  }\n\n  async function getRepositoriesList() {\n    setRepositories(null);\n    setIsLoading(true);\n\n    if (user) {\n      try {\n        const res = await axios.get(`https://api.github.com/users/${user.login}/repos`);\n        setRepositories(res.data);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }\n\n  async function getStarredList() {\n    setRepositories(null);\n    setIsLoading(true);\n\n    if (user) {\n      try {\n        const res = await axios.get(`https://api.github.com/users/${user.login}/starred`);\n        setRepositories(res.data);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }\n\n  return {\n    state: {\n      isLoading,\n      user,\n      hasUserNotFound,\n      repositories,\n      isLoadingSearch\n    },\n    actions: {\n      getUser,\n      getRepositoriesList,\n      getStarredList,\n      clean\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/imachado/Desktop/Develop/projects/uolDesafio/src/core/hooks/useGitHub/index.tsx"],"names":["useState","axios","useGitHub","user","setUser","repositories","setRepositories","hasUserNotFound","setHasUserNotFound","isLoading","setIsLoading","isLoadingSearch","setIsLoadingSearch","clean","getUser","userSearch","res","get","data","err","getRepositoriesList","login","getStarredList","state","actions"],"mappings":"AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBJ,QAAQ,CAAc,IAAd,CAAhC;AACA,QAAM;AAAA,OAACK,YAAD;AAAA,OAAeC;AAAf,MAAkCN,QAAQ,CAAsB,IAAtB,CAAhD;AACA,QAAM;AAAA,OAACO,eAAD;AAAA,OAAkBC;AAAlB,MAAwCR,QAAQ,CAAU,KAAV,CAAtD;AACA,QAAM;AAAA,OAACS,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAU,KAAV,CAAtD;;AAEA,WAASa,KAAT,GAAuB;AACrBL,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAN,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAF,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD;;AAED,iBAAeU,OAAf,CAAuBC,UAAvB,EAA0D;AACxDF,IAAAA,KAAK;AACLD,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;;AACA,QAAI;AACF,YAAMI,GAAG,GAAG,MAAMf,KAAK,CAACgB,GAAN,CACf,gCAA+BF,UAAW,EAD3B,CAAlB;AAGAX,MAAAA,OAAO,CAACY,GAAG,CAACE,IAAL,CAAP;AACD,KALD,CAKE,OAAOC,GAAP,EAAY;AACZX,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,KAPD,SAOU;AACRI,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD;AACF;;AAED,iBAAeQ,mBAAf,GAAoD;AAClDd,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAI,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAIP,IAAJ,EAAU;AACR,UAAI;AACF,cAAMa,GAAG,GAAG,MAAMf,KAAK,CAACgB,GAAN,CACf,gCAA+Bd,IAAI,CAACkB,KAAM,QAD3B,CAAlB;AAGAf,QAAAA,eAAe,CAACU,GAAG,CAACE,IAAL,CAAf;AACD,OALD,SAKU;AACRR,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF;AACF;;AAED,iBAAeY,cAAf,GAA+C;AAC7ChB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAI,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAIP,IAAJ,EAAU;AACR,UAAI;AACF,cAAMa,GAAG,GAAG,MAAMf,KAAK,CAACgB,GAAN,CACf,gCAA+Bd,IAAI,CAACkB,KAAM,UAD3B,CAAlB;AAGAf,QAAAA,eAAe,CAACU,GAAG,CAACE,IAAL,CAAf;AACD,OALD,SAKU;AACRR,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF;AACF;;AAED,SAAO;AACLa,IAAAA,KAAK,EAAE;AACLd,MAAAA,SADK;AAELN,MAAAA,IAFK;AAGLI,MAAAA,eAHK;AAILF,MAAAA,YAJK;AAKLM,MAAAA;AALK,KADF;AAQLa,IAAAA,OAAO,EAAE;AACPV,MAAAA,OADO;AAEPM,MAAAA,mBAFO;AAGPE,MAAAA,cAHO;AAIPT,MAAAA;AAJO;AARJ,GAAP;AAeD","sourcesContent":["// MARK: Libs\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useGitHub() {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [repositories, setRepositories] = useState<Repository[] | null>(null);\r\n  const [hasUserNotFound, setHasUserNotFound] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [isLoadingSearch, setIsLoadingSearch] = useState<boolean>(false);\r\n\r\n  function clean(): void {\r\n    setHasUserNotFound(false);\r\n    setIsLoading(false);\r\n    setIsLoadingSearch(false);\r\n    setRepositories(null);\r\n    setUser(null);\r\n  }\r\n\r\n  async function getUser(userSearch: string): Promise<void> {\r\n    clean();\r\n    setIsLoadingSearch(true);\r\n    try {\r\n      const res = await axios.get<User>(\r\n        `https://api.github.com/users/${userSearch}`,\r\n      );\r\n      setUser(res.data);\r\n    } catch (err) {\r\n      setHasUserNotFound(true);\r\n    } finally {\r\n      setIsLoadingSearch(false);\r\n    }\r\n  }\r\n\r\n  async function getRepositoriesList(): Promise<void> {\r\n    setRepositories(null);\r\n    setIsLoading(true);\r\n    if (user) {\r\n      try {\r\n        const res = await axios.get(\r\n          `https://api.github.com/users/${user.login}/repos`,\r\n        );\r\n        setRepositories(res.data);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  async function getStarredList(): Promise<void> {\r\n    setRepositories(null);\r\n    setIsLoading(true);\r\n    if (user) {\r\n      try {\r\n        const res = await axios.get(\r\n          `https://api.github.com/users/${user.login}/starred`,\r\n        );\r\n        setRepositories(res.data);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    state: {\r\n      isLoading,\r\n      user,\r\n      hasUserNotFound,\r\n      repositories,\r\n      isLoadingSearch,\r\n    },\r\n    actions: {\r\n      getUser,\r\n      getRepositoriesList,\r\n      getStarredList,\r\n      clean,\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}