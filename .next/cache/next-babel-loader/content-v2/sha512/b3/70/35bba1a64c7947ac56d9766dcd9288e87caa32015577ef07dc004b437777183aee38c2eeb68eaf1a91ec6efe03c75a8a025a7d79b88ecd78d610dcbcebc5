{"ast":null,"code":"import { useState } from 'react';\nimport axios from 'axios';\nexport default function useGitHub() {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n\n  async function getUser(userSearch) {\n    setIsLoading(true);\n    await axios.get(`https://api.github.com/users/${userSearch}`).then(res => {\n      setUser(res.data);\n    }).finally(() => setIsLoading(false));\n  }\n\n  return {\n    state: {\n      isLoading,\n      user\n    },\n    actions: {\n      getUser\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/imachado/Desktop/next-boilerplate/src/core/hooks/useGitHub/index.tsx"],"names":["useState","axios","useGitHub","isLoading","setIsLoading","user","setUser","getUser","userSearch","get","then","res","data","finally","state","actions"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAKA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BJ,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAc,IAAd,CAAhC;;AAEA,iBAAeO,OAAf,CAAuBC,UAAvB,EAA0D;AACxDJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMH,KAAK,CACRQ,GADG,CACQ,gCAA+BD,UAAW,EADlD,EAEHE,IAFG,CAEGC,GAAD,IAAS;AACbL,MAAAA,OAAO,CAACK,GAAG,CAACC,IAAL,CAAP;AACD,KAJG,EAKHC,OALG,CAKK,MAAMT,YAAY,CAAC,KAAD,CALvB,CAAN;AAMD;;AAED,SAAO;AACLU,IAAAA,KAAK,EAAE;AACLX,MAAAA,SADK;AAELE,MAAAA;AAFK,KADF;AAKLU,IAAAA,OAAO,EAAE;AACPR,MAAAA;AADO;AALJ,GAAP;AASD","sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Router from 'next/router';\r\nimport getConfig from 'next/config';\r\nimport { User } from './interface';\r\n\r\nexport default function useGitHub() {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [user, setUser] = useState<User | null>(null);\r\n\r\n  async function getUser(userSearch: string): Promise<void> {\r\n    setIsLoading(true);\r\n    await axios\r\n      .get<User>(`https://api.github.com/users/${userSearch}`)\r\n      .then((res) => {\r\n        setUser(res.data);\r\n      })\r\n      .finally(() => setIsLoading(false));\r\n  }\r\n\r\n  return {\r\n    state: {\r\n      isLoading,\r\n      user,\r\n    },\r\n    actions: {\r\n      getUser,\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}